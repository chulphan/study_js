/*
    reduce 

    배열을 값 하나로 줄이는 데 쓰임.
    reduce가 반환하는 값 하나는 객체일 수도, 다른 배열일 수도 있다.
    첫번째 매개변수로 배열이 줄어드는 대상인 어큐뮬레이터, 
    두번째 매개변수부터는 콜백의 순서대로 현재 배열 요소, 현재 인덱스, 배열 자체를 받는다.

    초기값도 옵션으로 받을 수 있다.
*/

const arr = [5, 7, 2, 4];
/*
    reduce의 콜백함수는 매개변수로 누적값 a와 현재 배열요소 x를 받았음.
    이 예제에서 누적값은 0으로 시작함.

    1. 첫번째 배열요소 5에서 함수를 호출.  a의 초기값은 0이고 x의 값은 5.
       함수는 a와 x의 합을 반환함.이 값은 다음 단계에서 a의 값이 됨.
    
    2. 두번째 배열요소 7에서 함수를 호출. a의 초기값은 이전 단계에서 전달한 5이고, x의 값은 7.
       함수는 a와 x의 합 12를 반환함. 이 값은 다음 단계에서 a의 값이 됨.
    
    3. 세번째 배열요소 2에서 함수를 호출. 이 단계에서 a는 12이고 x는 2.
       함수는 a와 x의 합인 14를 반환함.

    4. 네번째이자 마지막 배열요소인 4에서 함수를 호출. a는 14이고 x는 4. 함수는 a와 x의 합인 18을 반환하며
       이 값은 reduce의 값이고 sum에 할당되는 값.
*/
const sum = arr.reduce((a, x) => a+x, 0);

/*
    초기값이 undefined로 주어지는 경우.

    1.  두번째 배열요소 7에서 함수가 호출됨. a의 초기값은 첫번째 배열요소인 5이고, x의 값은 7임.
        함수는 a와 x의 합인 12를 반환하고, 이 값이 다음 단계에서의 a값이 됨.

    2.  세번째 배열요소 2에서 함수를 호출. a의 초기값은 12이고 x의 값은 2.
        함수는 a와 x의 합인 14를 반환함.

    3.  네번째이자 마지막 배열요소인 4에서 함수를 호출. a는 14이고 x는 4. 함수는 a와 x의 합인
        18을 반환하며 이 값은 reduce 값이고 sum에 할당되는 값.

*/
const sum_2 = arr.reduce((a, x) => a + x);

/*
    객체 또한 누적값이 될 수 있음.
*/ 
const words = [
    "Beachball",
    "Rodeo",
    "Angel",
    "Aardvark",
    "Xylophone",
    "November",
    "Chocolate",
    "Papaya",
    "Uniform",
    "Joker",
    "Clover",
    "Bali"
];

const alphabetical = words.reduce((a, x) => {
    if(!a[x[0]]) a[x[0]] = [];
    a[x[0]].push(x);
    return a;
}, {})

console.log(alphabetical);